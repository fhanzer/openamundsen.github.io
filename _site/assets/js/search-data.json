{"0": {
    "doc": "About",
    "title": "About",
    "content": "under construction . ",
    "url": "http://localhost:4000/about/",
    "relUrl": "/about/"
  },"1": {
    "doc": "Inside canopy",
    "title": "Simulating inside-canopy micrometeorology and snow processes (interception, sublimation, melt unload)",
    "content": "under construction . ",
    "url": "http://localhost:4000/des/canopy#simulating-inside-canopy-micrometeorology-and-snow-processes-interception-sublimation-melt-unload",
    "relUrl": "/des/canopy#simulating-inside-canopy-micrometeorology-and-snow-processes-interception-sublimation-melt-unload"
  },"2": {
    "doc": "Inside canopy",
    "title": "Inside canopy",
    "content": " ",
    "url": "http://localhost:4000/des/canopy",
    "relUrl": "/des/canopy"
  },"3": {
    "doc": "Configuration",
    "title": "Configuration",
    "content": "The configuration of an openAMUNDSEN model run can either be read in from a YAML file or be passed directly as a dictionary from within Python. This is an example of a YAML configuration file: . domain: rofental # name of the model domain (corresponding to the domain part of the spatial input data filenames) start_date: \"2020-10-01\" end_date: \"2021-03-31\" resolution: 50 # spatial resolution (m) timestep: H # temporal resolution as a pandas-compatible frequency string (e.g., \"H\", \"3H\", \"D\") crs: \"epsg:32632\" # CRS of the input grids timezone: 1 # timezone of the model domain (difference to UTC in h) results_dir: results # directory for storing the model outputs # Input data configuration input_data: grids: dir: input/grid # location of the input grids (DEM, ROI etc.) meteo: dir: input/meteo # location of the meteorological input data format: csv # input format (CSV or NetCDF) crs: \"epsg:4326\" # CRS of the station coordinates (when using CSV) # Output data configuration output_data: # Time series (point) outputs configuration timeseries: # List of points to be written points: - x: 642579 # x coordinate in the domain CRS y: 5193069 # y coordinate in the domain CRS name: testpoint # point name (optional) add_default_variables: true # write default point output variables variables: # optional additional output variables not written by default - var: surface.turbulent_exchange_coeff # Configuration for gridded outputs grids: format: netcdf # \"netcdf\", \"ascii\", \"geotiff\" or \"memory\" variables: - var: meteo.precip # internal variable name name: precip_month # NetCDF output variable name freq: M # write frequency (if not specified, write every timestep) agg: sum # aggregation function (\"sum\", \"mean\" or empty) - var: snow.melt freq: M agg: sum - var: snow.swe freq: D meteo: # Spatial interpolation parameters interpolation: temperature: trend_method: fixed # use fixed monthly temperature lapse rates precipitation: trend_method: fractional # use fixed monthly fractional precipitation gradients lapse_rate: # (m-1) - 0.00048 # J - 0.00046 # F - 0.00041 # M - 0.00033 # A - 0.00028 # M - 0.00025 # J - 0.00024 # J - 0.00025 # A - 0.00028 # S - 0.00033 # O - 0.00041 # N - 0.00046 # D humidity: trend_method: fixed # use fixed monthly dew point temperature lapse rates # Precipitation phase determination parameters precipitation_phase: method: wet_bulb_temp # use wet-bulb temperature for precipitation phase determination threshold_temp: 273.65 # threshold temperature (K) in which 50% of precipitation falls as snow temp_range: 1. # temperature range in which mixed precipitation can occur # Parameters for adjusting precipitation for wind-induced undercatch and snow redistribution precipitation_correction: - method: wmo gauge: hellmann snow: model: multilayer # snow scheme (\"multilayer\" or \"cryolayers\") # Number of layers and minimum thicknesses (m) when using the multilayer model min_thickness: - 0.1 - 0.2 - 0.4 albedo: min: 0.55 # minimum snow albedo max: 0.85 # maximum snow albedo cold_snow_decay_timescale: 480 # albedo decay timescale for cold (T &lt; 0 °C) snow (h) melting_snow_decay_timescale: 200 # albedo decay timescale for melting snow (h) refresh_snowfall: 0.5 # snowfall amount for resetting albedo to the maximum value (kg m-2 h-1) . Only few configuration parameters (domain, start_date, end_date, resolution, timezone and the input data directories) are mandatory, for all other parameters default values are used otherwise. A detailed documentation of all model parameters will be available soon (in the meantime, the available parameters and their default values can be looked up in configschema.yml). ",
    "url": "http://localhost:4000/doc/configuration",
    "relUrl": "/doc/configuration"
  },"4": {
    "doc": "Live demo",
    "title": "Try the model online!",
    "content": "You can find a ready-to-use-online version of the model here: jupyter.openamundsen.org . ",
    "url": "http://localhost:4000/demo/#try-the-model-online",
    "relUrl": "/demo/#try-the-model-online"
  },"5": {
    "doc": "Live demo",
    "title": "Live demo",
    "content": " ",
    "url": "http://localhost:4000/demo/",
    "relUrl": "/demo/"
  },"6": {
    "doc": "Description",
    "title": "openAMUNDSEN",
    "content": "openAMUNDSEN is a modular snow and hydroclimatological modeling framework written in Python. ",
    "url": "http://localhost:4000/des/#openamundsen",
    "relUrl": "/des/#openamundsen"
  },"7": {
    "doc": "Description",
    "title": "Overview",
    "content": "openAMUNDSEN is a fully distributed model, designed primarily for resolving the mass and energy balance of snow and ice covered surfaces in mountain regions. Typically, it is applied in areas ranging from the point scale to the regional scale (i.e., up to some hundreds to thousands of square kilometers), using a spatial resolution of 10–100 m and a temporal resolution of 1–3 h, however its potential applications are very versatile. Main features include: . | Spatial interpolation of scattered meteorological point measurements using a combined lapse rate – inverse distance weighting scheme | Calculation of solar radiation taking into account terrain slope and orientation, hill shading and atmospheric transmission losses and gains due to scattering, absorption, and reflections | Adjustment of precipitation using several correction functions for wind-induced undercatch and redistribution of snow using terrain-based parameterizations | Simulation of the snow and ice mass and energy balance using either a multilayer scheme or a bulk-layering scheme using separate layers for new snow, old snow, firn and ice | Modification of the meteorological variables for inside-canopy conditions in forested areas and calculation of forest snow processes (interception, sublimation and melt unload) | Calculation of snowmelt using the surface energy balance or a temperature index/enhanced temperature index method | Calculation of evapotranspiration for snow-free surfaces using the FAO Penman-Monteith method | Usage of arbitrary timesteps (e.g. 10 minutes, daily) while resampling forcing data to the desired time resolution if necessary | Flexible output of time series including arbitrary model variables for selected point locations in NetCDF or CSV format | Flexible output of gridded model variables, either for specific dates or periodically (e.g., daily or monthly), optionally aggregated to averages or sums in NetCDF, GeoTIFF or ASCII Grid format | Live view window for displaying the model state in real time | . ",
    "url": "http://localhost:4000/des/#overview",
    "relUrl": "/des/#overview"
  },"8": {
    "doc": "Description",
    "title": "Description",
    "content": " ",
    "url": "http://localhost:4000/des/",
    "relUrl": "/des/"
  },"9": {
    "doc": "Documentation",
    "title": "User guide",
    "content": ". ",
    "url": "http://localhost:4000/doc/#user-guide",
    "relUrl": "/doc/#user-guide"
  },"10": {
    "doc": "Documentation",
    "title": "Overview",
    "content": "These pages describe how to install, set up, and run openAMUNDSEN. ",
    "url": "http://localhost:4000/doc/#overview",
    "relUrl": "/doc/#overview"
  },"11": {
    "doc": "Documentation",
    "title": "Documentation",
    "content": " ",
    "url": "http://localhost:4000/doc/",
    "relUrl": "/doc/"
  },"12": {
    "doc": "Radiation modeling",
    "title": "Calculating the energy- and mass-balance of snow and ice",
    "content": "under construction . ",
    "url": "http://localhost:4000/des/energy#calculating-the-energy--and-mass-balance-of-snow-and-ice",
    "relUrl": "/des/energy#calculating-the-energy--and-mass-balance-of-snow-and-ice"
  },"13": {
    "doc": "Radiation modeling",
    "title": "Radiation modeling",
    "content": " ",
    "url": "http://localhost:4000/des/energy",
    "relUrl": "/des/energy"
  },"14": {
    "doc": "Evapotranspiration",
    "title": "Calculating evapotranspiration using the FAO Penman-Monteith method",
    "content": "under construction . ",
    "url": "http://localhost:4000/des/evapotranspiration#calculating-evapotranspiration-using-the-fao-penman-monteith-method",
    "relUrl": "/des/evapotranspiration#calculating-evapotranspiration-using-the-fao-penman-monteith-method"
  },"15": {
    "doc": "Evapotranspiration",
    "title": "Evapotranspiration",
    "content": " ",
    "url": "http://localhost:4000/des/evapotranspiration",
    "relUrl": "/des/evapotranspiration"
  },"16": {
    "doc": "Example data sets",
    "title": "Examples",
    "content": "Example data sets for running the model can be downloaded from https://github.com/openamundsen/openamundsen-examples. ",
    "url": "http://localhost:4000/doc/exampledata#examples",
    "relUrl": "/doc/exampledata#examples"
  },"17": {
    "doc": "Example data sets",
    "title": "Example data sets",
    "content": " ",
    "url": "http://localhost:4000/doc/exampledata",
    "relUrl": "/doc/exampledata"
  },"18": {
    "doc": "Glacier model",
    "title": "Simulating glaciers",
    "content": "under construction . ",
    "url": "http://localhost:4000/des/glacier#simulating-glaciers",
    "relUrl": "/des/glacier#simulating-glaciers"
  },"19": {
    "doc": "Glacier model",
    "title": "Glacier model",
    "content": " ",
    "url": "http://localhost:4000/des/glacier",
    "relUrl": "/des/glacier"
  },"20": {
    "doc": "openAMUNDSEN",
    "title": "openAMUNDSEN",
    "content": "This is home of the hydroclimatological modeling framework openAMUNDSEN. You can find the latest model version at GitHub. Check out these pages: . | News | Model description - What’s inside? | Model documentation - How to use the model | Live demo - Try the model online! | Publications | About | . You can find a ready-to-use-online version of the model here: jupyter.openamundsen.org . ",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  },"21": {
    "doc": "Input data",
    "title": "Input data",
    "content": "Required input data for running the model is at the least: . | a digital elevation model (DEM) as an Arc/Info ASCII Grid (.asc) file in a projected coordinate reference system, with the same spatial resolution in which the model should be run, | and time series of the meteorological variables air temperature, precipitation, relative humidity, global radiation and wind speed in NetCDF or CSV format. | . Optionally, a region of interest (ROI) file can be additionally supplied defining a subset of the DEM area in which the model should be applied. All model calculations are then only performed for the pixels which are marked as 1 in the ROI file. ",
    "url": "http://localhost:4000/doc/input",
    "relUrl": "/doc/input"
  },"22": {
    "doc": "Input data",
    "title": "Spatial input data",
    "content": "The DEM file must be named dem_{domain}_{resolution}.asc, where {domain} refers to the (freely selectable) name of the respective model domain, and {resolution} to the spatial resolution in m. Accordingly, the ROI file (if available) is named roi_{domain}_{resolution}.asc. ",
    "url": "http://localhost:4000/doc/input#spatial-input-data",
    "relUrl": "/doc/input#spatial-input-data"
  },"23": {
    "doc": "Input data",
    "title": "Meteorological input data",
    "content": "Meteorological input time series must be provided in the same or higher temporal resolution in which the model should be run. For each point location, a CSV or NetCDF file covering the entire time series must be provided. CSV input . When using CSV as input format, the input files should have one or more of the following columns (columns for variables not available can be omitted): . | date: timestamp as a pd.to_datetime-compatible string (e.g. YYYY-MM-DD HH:MM) | temp: air temperature (K) | precip: precipitation sum (kg m-2) | rel_hum: relative humidity (%) | sw_in: global radiation (W m-2) | wind_speed: wind speed (m s-1) | . Additionally, a stations.csv file containing the metadata of the point locations must be provided containing the following columns: . | id: station ID, corresponding to the filename of the respective data file | name: station name | x: longitude or projected x coordinate | y: latitude or projected y coordinate | alt: altitude (m) | . NetCDF input . When using NetCDF as input format, for each station a NetCDF file containing the meteorological time series and the station metadata is read in (i.e., no additional metadata file is required in this case). The NetCDF files are expected to conform to the following schema (unavailable variables can be omitted): . netcdf dummy { dimensions: time = UNLIMITED ; variables: double alt ; alt:_FillValue = NaN ; alt:standard_name = \"surface_altitude\" ; alt:units = \"m\" ; float hurs(time) ; hurs:_FillValue = NaNf ; hurs:standard_name = \"relative_humidity\" ; hurs:units = \"%\" ; double lat ; lat:_FillValue = NaN ; lat:standard_name = \"latitude\" ; lat:units = \"degree_north\" ; double lon ; lon:_FillValue = NaN ; lon:standard_name = \"longitude\" ; lon:units = \"degree_east\" ; float pr(time) ; pr:_FillValue = NaNf ; pr:standard_name = \"precipitation_flux\" ; pr:units = \"kg m-2 s-1\" ; float rsds(time) ; rsds:_FillValue = NaNf ; rsds:standard_name = \"surface_downwelling_shortwave_flux_in_air\" ; rsds:units = \"W m-2\" ; float tas(time) ; tas:_FillValue = NaNf ; tas:standard_name = \"air_temperature\" ; tas:units = \"K\" ; int64 time(time) ; time:standard_name = \"time\" ; time:units = \"hours since 1999-01-01 00:00:00\" ; time:calendar = \"proleptic_gregorian\" ; float wss(time) ; wss:_FillValue = NaNf ; wss:standard_name = \"wind_speed\" ; wss:units = \"m s-1\" ; // global attributes: :Conventions = \"CF-1.6\" ; :station_name = \"dummy\" ; } . ",
    "url": "http://localhost:4000/doc/input#meteorological-input-data",
    "relUrl": "/doc/input#meteorological-input-data"
  },"24": {
    "doc": "Installation",
    "title": "Installation",
    "content": "openAMUNDSEN is a Python (3.7+) package and compatible with all major platforms (Linux, macOS, Windows) and architectures. To help keep its dependencies separated from other Python packages installed on your system, we recommend to install it either from within a conda environment (if you are using the conda package manager) or a standard Python virtual environment. ",
    "url": "http://localhost:4000/doc/installation",
    "relUrl": "/doc/installation"
  },"25": {
    "doc": "Installation",
    "title": "Using conda",
    "content": "When using conda, the recommended steps to install openAMUNDSEN are: . | Install Miniconda (recommended) or Anaconda by downloading and executing the installer for your operating system and architecture. | From the terminal, create a conda environment for openAMUNDSEN by running . conda create --name openamundsen . | Activate the environment by running . conda activate openamundsen . | Install openAMUNDSEN by running . conda install --channel=conda-forge openamundsen . | . ",
    "url": "http://localhost:4000/doc/installation#using-conda",
    "relUrl": "/doc/installation#using-conda"
  },"26": {
    "doc": "Installation",
    "title": "Using virtualenv",
    "content": "If you want to install openAMUNDSEN in a virtual environment instead: . | Create a virtualenv in the current working directory by running . python3 -m venv openamundsen . | Activate the environment by running . source openamundsen/bin/activate . | Install openAMUNDSEN by running . pip install openamundsen . | . ",
    "url": "http://localhost:4000/doc/installation#using-virtualenv",
    "relUrl": "/doc/installation#using-virtualenv"
  },"27": {
    "doc": "Processing meteo data",
    "title": "Processing and interpolation of meteorological inut data",
    "content": "under construction . ",
    "url": "http://localhost:4000/des/meteo#processing-and-interpolation-of-meteorological-inut-data",
    "relUrl": "/des/meteo#processing-and-interpolation-of-meteorological-inut-data"
  },"28": {
    "doc": "Processing meteo data",
    "title": "Processing meteo data",
    "content": " ",
    "url": "http://localhost:4000/des/meteo",
    "relUrl": "/des/meteo"
  },"29": {
    "doc": "News",
    "title": "News",
    "content": "under construction . ",
    "url": "http://localhost:4000/news/",
    "relUrl": "/news/"
  },"30": {
    "doc": "Output data",
    "title": "Output data",
    "content": " ",
    "url": "http://localhost:4000/doc/output",
    "relUrl": "/doc/output"
  },"31": {
    "doc": "Precipitation correction",
    "title": "Correction of precipitation undercatch",
    "content": "under construction . ",
    "url": "http://localhost:4000/des/precipitation#correction-of-precipitation-undercatch",
    "relUrl": "/des/precipitation#correction-of-precipitation-undercatch"
  },"32": {
    "doc": "Precipitation correction",
    "title": "Precipitation correction",
    "content": " ",
    "url": "http://localhost:4000/des/precipitation",
    "relUrl": "/des/precipitation"
  },"33": {
    "doc": "Publications",
    "title": "Publications",
    "content": "under construction . ",
    "url": "http://localhost:4000/publications/",
    "relUrl": "/publications/"
  },"34": {
    "doc": "Radiation modeling",
    "title": "Short- and longwave radiative flux modeling",
    "content": "under construction . ",
    "url": "http://localhost:4000/des/meteo#short--and-longwave-radiative-flux-modeling",
    "relUrl": "/des/meteo#short--and-longwave-radiative-flux-modeling"
  },"35": {
    "doc": "Radiation modeling",
    "title": "Radiation modeling",
    "content": " ",
    "url": "http://localhost:4000/des/meteo",
    "relUrl": "/des/meteo"
  },"36": {
    "doc": "Running the model",
    "title": "Running the model",
    "content": "When the input data and the model configuration have been prepared, a model run can be started either using the openamundsen command line utility (openamundsen config_file.yml), or from within Python using the following syntax: . import openamundsen as oa config = oa.read_config('config_file.yml') # read in configuration file model = oa.OpenAmundsen(config) # create OpenAmundsen object and populate unspecified parameters with default values model.initialize() # read in input data files, initialize state variables etc. model.run() # run the model . ",
    "url": "http://localhost:4000/doc/runningthemodel",
    "relUrl": "/doc/runningthemodel"
  },"37": {
    "doc": "Runoff",
    "title": "Simulating catchment runoff and streamflow",
    "content": "under construction . ",
    "url": "http://localhost:4000/des/runoff#simulating-catchment-runoff-and-streamflow",
    "relUrl": "/des/runoff#simulating-catchment-runoff-and-streamflow"
  },"38": {
    "doc": "Runoff",
    "title": "Runoff",
    "content": " ",
    "url": "http://localhost:4000/des/runoff",
    "relUrl": "/des/runoff"
  },"39": {
    "doc": "Model structure",
    "title": "General model structure",
    "content": "under construction . ",
    "url": "http://localhost:4000/des/structure#general-model-structure",
    "relUrl": "/des/structure#general-model-structure"
  },"40": {
    "doc": "Model structure",
    "title": "Model structure",
    "content": " ",
    "url": "http://localhost:4000/des/structure",
    "relUrl": "/des/structure"
  }
}
