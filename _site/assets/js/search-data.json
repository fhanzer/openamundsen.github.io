{"0": {
    "doc": "About",
    "title": "About",
    "content": "under construction . ",
    "url": "http://localhost:4000/about/",
    "relUrl": "/about/"
  },"1": {
    "doc": "Inside canopy",
    "title": "Simulating inside-canopy micrometeorology and snow processes (interception, sublimation, melt unload)",
    "content": " ",
    "url": "http://localhost:4000/des/canopy#simulating-inside-canopy-micrometeorology-and-snow-processes-interception-sublimation-melt-unload",
    "relUrl": "/des/canopy#simulating-inside-canopy-micrometeorology-and-snow-processes-interception-sublimation-melt-unload"
  },"2": {
    "doc": "Inside canopy",
    "title": "Inside-canopy micrometeorology",
    "content": " ",
    "url": "http://localhost:4000/des/canopy#inside-canopy-micrometeorology",
    "relUrl": "/des/canopy#inside-canopy-micrometeorology"
  },"3": {
    "doc": "Inside canopy",
    "title": "Snow-forest interaction",
    "content": "under construction . ",
    "url": "http://localhost:4000/des/canopy#snow-forest-interaction",
    "relUrl": "/des/canopy#snow-forest-interaction"
  },"4": {
    "doc": "Inside canopy",
    "title": "Inside canopy",
    "content": " ",
    "url": "http://localhost:4000/des/canopy",
    "relUrl": "/des/canopy"
  },"5": {
    "doc": "Configuration",
    "title": "Configuration",
    "content": "The configuration of an openAMUNDSEN model run can either be read in from a YAML file or be passed directly as a dictionary from within Python. This is an example of a YAML configuration file: . domain: rofental # name of the model domain (corresponding to the domain part of the spatial input data filenames) start_date: \"2020-10-01\" end_date: \"2021-03-31\" resolution: 50 # spatial resolution (m) timestep: H # temporal resolution as a pandas-compatible frequency string (e.g., \"H\", \"3H\", \"D\") crs: \"epsg:32632\" # CRS of the input grids timezone: 1 # timezone of the model domain (difference to UTC in h) results_dir: results # directory for storing the model outputs # Input data configuration input_data: grids: dir: input/grid # location of the input grids (DEM, ROI etc.) meteo: dir: input/meteo # location of the meteorological input data format: csv # input format (CSV or NetCDF) crs: \"epsg:4326\" # CRS of the station coordinates (when using CSV) # Output data configuration output_data: # Time series (point) outputs configuration timeseries: # List of points to be written points: - x: 642579 # x coordinate in the domain CRS y: 5193069 # y coordinate in the domain CRS name: testpoint # point name (optional) add_default_variables: true # write default point output variables variables: # optional additional output variables not written by default - var: surface.turbulent_exchange_coeff # Configuration for gridded outputs grids: format: netcdf # \"netcdf\", \"ascii\", \"geotiff\" or \"memory\" variables: - var: meteo.precip # internal variable name name: precip_month # NetCDF output variable name freq: M # write frequency (if not specified, write every timestep) agg: sum # aggregation function (\"sum\", \"mean\" or empty) - var: snow.melt freq: M agg: sum - var: snow.swe freq: D meteo: # Spatial interpolation parameters interpolation: temperature: trend_method: fixed # use fixed monthly temperature lapse rates precipitation: trend_method: fractional # use fixed monthly fractional precipitation gradients lapse_rate: # (m-1) - 0.00048 # J - 0.00046 # F - 0.00041 # M - 0.00033 # A - 0.00028 # M - 0.00025 # J - 0.00024 # J - 0.00025 # A - 0.00028 # S - 0.00033 # O - 0.00041 # N - 0.00046 # D humidity: trend_method: fixed # use fixed monthly dew point temperature lapse rates # Precipitation phase determination parameters precipitation_phase: method: wet_bulb_temp # use wet-bulb temperature for precipitation phase determination threshold_temp: 273.65 # threshold temperature (K) in which 50% of precipitation falls as snow temp_range: 1. # temperature range in which mixed precipitation can occur # Parameters for adjusting precipitation for wind-induced undercatch and snow redistribution precipitation_correction: - method: wmo gauge: hellmann snow: model: multilayer # snow scheme (\"multilayer\" or \"cryolayers\") # Number of layers and minimum thicknesses (m) when using the multilayer model min_thickness: - 0.1 - 0.2 - 0.4 albedo: min: 0.55 # minimum snow albedo max: 0.85 # maximum snow albedo cold_snow_decay_timescale: 480 # albedo decay timescale for cold (T &lt; 0 °C) snow (h) melting_snow_decay_timescale: 200 # albedo decay timescale for melting snow (h) refresh_snowfall: 0.5 # snowfall amount for resetting albedo to the maximum value (kg m-2 h-1) . Only few configuration parameters (domain, start_date, end_date, resolution, timezone and the input data directories) are mandatory, for all other parameters default values are used otherwise. A detailed documentation of all model parameters will be available soon (in the meantime, the available parameters and their default values can be looked up in configschema.yml). ",
    "url": "http://localhost:4000/doc/configuration",
    "relUrl": "/doc/configuration"
  },"6": {
    "doc": "Live demo",
    "title": "Try the model online!",
    "content": "You can find a ready-to-use-online version of the model here: jupyter.openamundsen.org. Please send a mail to michael.warscher@uibk.ac.at to request a login. ",
    "url": "http://localhost:4000/demo/#try-the-model-online",
    "relUrl": "/demo/#try-the-model-online"
  },"7": {
    "doc": "Live demo",
    "title": "Live demo",
    "content": " ",
    "url": "http://localhost:4000/demo/",
    "relUrl": "/demo/"
  },"8": {
    "doc": "Description",
    "title": "Model description",
    "content": "openAMUNDSEN is a modular snow and hydroclimatological modeling framework written in Python. ",
    "url": "http://localhost:4000/des/#model-description",
    "relUrl": "/des/#model-description"
  },"9": {
    "doc": "Description",
    "title": "Overview",
    "content": "openAMUNDSEN is a fully distributed model, designed primarily for resolving the mass and energy balance of snow and ice covered surfaces in mountain regions. Typically, it is applied in areas ranging from the point scale to the regional scale (i.e., up to some hundreds to thousands of square kilometers), using a spatial resolution of 10–100 m and a temporal resolution of 1–3 h, however its potential applications are very versatile. Main features include: . | Spatial interpolation of scattered meteorological point measurements using a combined lapse rate – inverse distance weighting scheme | Calculation of solar radiation taking into account terrain slope and orientation, hill shading and atmospheric transmission losses and gains due to scattering, absorption, and reflections | Adjustment of precipitation using several correction functions for wind-induced undercatch and redistribution of snow using terrain-based parameterizations | Simulation of the snow and ice mass and energy balance using either a multilayer scheme or a bulk-layering scheme using separate layers for new snow, old snow, firn and ice | Modification of the meteorological variables for inside-canopy conditions in forested areas and calculation of forest snow processes (interception, sublimation and melt unload) | Calculation of snowmelt using the surface energy balance or a temperature index/enhanced temperature index method | Calculation of evapotranspiration for snow-free surfaces using the FAO Penman-Monteith method | Usage of arbitrary timesteps (e.g. 10 minutes, daily) while resampling forcing data to the desired time resolution if necessary | Flexible output of time series including arbitrary model variables for selected point locations in NetCDF or CSV format | Flexible output of gridded model variables, either for specific dates or periodically (e.g., daily or monthly), optionally aggregated to averages or sums in NetCDF, GeoTIFF or ASCII Grid format | Live view window for displaying the model state in real time | . ",
    "url": "http://localhost:4000/des/#overview",
    "relUrl": "/des/#overview"
  },"10": {
    "doc": "Description",
    "title": "Description",
    "content": " ",
    "url": "http://localhost:4000/des/",
    "relUrl": "/des/"
  },"11": {
    "doc": "Documentation",
    "title": "User guide",
    "content": ". ",
    "url": "http://localhost:4000/doc/#user-guide",
    "relUrl": "/doc/#user-guide"
  },"12": {
    "doc": "Documentation",
    "title": "Overview",
    "content": "These pages describe how to install, set up, and run openAMUNDSEN. ",
    "url": "http://localhost:4000/doc/#overview",
    "relUrl": "/doc/#overview"
  },"13": {
    "doc": "Documentation",
    "title": "Documentation",
    "content": " ",
    "url": "http://localhost:4000/doc/",
    "relUrl": "/doc/"
  },"14": {
    "doc": "Energy and mass balance",
    "title": "Calculating the energy and mass balance of snow and ice",
    "content": "under construction . ",
    "url": "http://localhost:4000/des/energy#calculating-the-energy-and-mass-balance-of-snow-and-ice",
    "relUrl": "/des/energy#calculating-the-energy-and-mass-balance-of-snow-and-ice"
  },"15": {
    "doc": "Energy and mass balance",
    "title": "Energy and mass balance",
    "content": " ",
    "url": "http://localhost:4000/des/energy",
    "relUrl": "/des/energy"
  },"16": {
    "doc": "Evapotranspiration",
    "title": "Calculating evapotranspiration using the FAO Penman-Monteith method",
    "content": "under construction . ",
    "url": "http://localhost:4000/des/evapotranspiration#calculating-evapotranspiration-using-the-fao-penman-monteith-method",
    "relUrl": "/des/evapotranspiration#calculating-evapotranspiration-using-the-fao-penman-monteith-method"
  },"17": {
    "doc": "Evapotranspiration",
    "title": "Evapotranspiration",
    "content": " ",
    "url": "http://localhost:4000/des/evapotranspiration",
    "relUrl": "/des/evapotranspiration"
  },"18": {
    "doc": "Example data sets",
    "title": "Example data sets",
    "content": "Example data sets for running the model can be downloaded from https://github.com/openamundsen/openamundsen-examples. ",
    "url": "http://localhost:4000/doc/exampledata",
    "relUrl": "/doc/exampledata"
  },"19": {
    "doc": "Glacier model",
    "title": "Simulating glaciers",
    "content": "under construction . ",
    "url": "http://localhost:4000/des/glacier#simulating-glaciers",
    "relUrl": "/des/glacier#simulating-glaciers"
  },"20": {
    "doc": "Glacier model",
    "title": "Glacier model",
    "content": " ",
    "url": "http://localhost:4000/des/glacier",
    "relUrl": "/des/glacier"
  },"21": {
    "doc": "openAMUNDSEN",
    "title": "openAMUNDSEN",
    "content": "This is home of the modular snow and hydroclimatological modeling framework openAMUNDSEN. You can find the latest model version at GitHub. Check out these pages: . | News | Model description - What’s inside? | Model documentation - How to use the model | Live demo - Try the model online! | Publications | About | . ",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  },"22": {
    "doc": "Input data",
    "title": "Input data",
    "content": "Required input data for running the model is at the least: . | a digital elevation model (DEM) as an Arc/Info ASCII Grid (.asc) file in a projected coordinate reference system, with the same spatial resolution in which the model should be run, | and time series of the meteorological variables air temperature, precipitation, relative humidity, global radiation and wind speed in NetCDF or CSV format. | . Optionally, a region of interest (ROI) file can be additionally supplied defining a subset of the DEM area in which the model should be applied. All model calculations are then only performed for the pixels which are marked as 1 in the ROI file. ",
    "url": "http://localhost:4000/doc/input",
    "relUrl": "/doc/input"
  },"23": {
    "doc": "Input data",
    "title": "Spatial input data",
    "content": "The DEM file must be named dem_{domain}_{resolution}.asc, where {domain} refers to the (freely selectable) name of the respective model domain, and {resolution} to the spatial resolution in m. Accordingly, the ROI file (if available) is named roi_{domain}_{resolution}.asc. ",
    "url": "http://localhost:4000/doc/input#spatial-input-data",
    "relUrl": "/doc/input#spatial-input-data"
  },"24": {
    "doc": "Input data",
    "title": "Meteorological input data",
    "content": "Meteorological input time series must be provided in the same or higher temporal resolution in which the model should be run. For each point location, a CSV or NetCDF file covering the entire time series must be provided. CSV input . When using CSV as input format, the input files should have one or more of the following columns (columns for variables not available can be omitted): . | date: timestamp as a pd.to_datetime-compatible string (e.g. YYYY-MM-DD HH:MM) | temp: air temperature (K) | precip: precipitation sum (kg m-2) | rel_hum: relative humidity (%) | sw_in: global radiation (W m-2) | wind_speed: wind speed (m s-1) | . Additionally, a stations.csv file containing the metadata of the point locations must be provided containing the following columns: . | id: station ID, corresponding to the filename of the respective data file | name: station name | x: longitude or projected x coordinate | y: latitude or projected y coordinate | alt: altitude (m) | . NetCDF input . When using NetCDF as input format, for each station a NetCDF file containing the meteorological time series and the station metadata is read in (i.e., no additional metadata file is required in this case). The NetCDF files are expected to conform to the following schema (unavailable variables can be omitted): . netcdf dummy { dimensions: time = UNLIMITED ; variables: double alt ; alt:_FillValue = NaN ; alt:standard_name = \"surface_altitude\" ; alt:units = \"m\" ; float hurs(time) ; hurs:_FillValue = NaNf ; hurs:standard_name = \"relative_humidity\" ; hurs:units = \"%\" ; double lat ; lat:_FillValue = NaN ; lat:standard_name = \"latitude\" ; lat:units = \"degree_north\" ; double lon ; lon:_FillValue = NaN ; lon:standard_name = \"longitude\" ; lon:units = \"degree_east\" ; float pr(time) ; pr:_FillValue = NaNf ; pr:standard_name = \"precipitation_flux\" ; pr:units = \"kg m-2 s-1\" ; float rsds(time) ; rsds:_FillValue = NaNf ; rsds:standard_name = \"surface_downwelling_shortwave_flux_in_air\" ; rsds:units = \"W m-2\" ; float tas(time) ; tas:_FillValue = NaNf ; tas:standard_name = \"air_temperature\" ; tas:units = \"K\" ; int64 time(time) ; time:standard_name = \"time\" ; time:units = \"hours since 1999-01-01 00:00:00\" ; time:calendar = \"proleptic_gregorian\" ; float wss(time) ; wss:_FillValue = NaNf ; wss:standard_name = \"wind_speed\" ; wss:units = \"m s-1\" ; // global attributes: :Conventions = \"CF-1.6\" ; :station_name = \"dummy\" ; } . ",
    "url": "http://localhost:4000/doc/input#meteorological-input-data",
    "relUrl": "/doc/input#meteorological-input-data"
  },"25": {
    "doc": "Installation",
    "title": "Installation",
    "content": "openAMUNDSEN is a Python (3.7+) package and compatible with all major platforms (Linux, macOS, Windows) and architectures. To help keep its dependencies separated from other Python packages installed on your system, we recommend to install it either from within a conda environment (if you are using the conda package manager) or a standard Python virtual environment. ",
    "url": "http://localhost:4000/doc/installation",
    "relUrl": "/doc/installation"
  },"26": {
    "doc": "Installation",
    "title": "Using conda",
    "content": "When using conda, the recommended steps to install openAMUNDSEN are: . | Install Miniconda (recommended) or Anaconda by downloading and executing the installer for your operating system and architecture. | From the terminal, create a conda environment for openAMUNDSEN by running . conda create --name openamundsen . | Activate the environment by running . conda activate openamundsen . | Install openAMUNDSEN by running . conda install --channel=conda-forge openamundsen . | . ",
    "url": "http://localhost:4000/doc/installation#using-conda",
    "relUrl": "/doc/installation#using-conda"
  },"27": {
    "doc": "Installation",
    "title": "Using virtualenv",
    "content": "If you want to install openAMUNDSEN in a virtual environment instead: . | Create a virtualenv in the current working directory by running . python3 -m venv openamundsen . | Activate the environment by running . source openamundsen/bin/activate . | Install openAMUNDSEN by running . pip install openamundsen . | . ",
    "url": "http://localhost:4000/doc/installation#using-virtualenv",
    "relUrl": "/doc/installation#using-virtualenv"
  },"28": {
    "doc": "Lateral snow redistribution",
    "title": "Simulating of lateral snow redistribution processes",
    "content": " ",
    "url": "http://localhost:4000/des/lateral#simulating-of-lateral-snow-redistribution-processes",
    "relUrl": "/des/lateral#simulating-of-lateral-snow-redistribution-processes"
  },"29": {
    "doc": "Lateral snow redistribution",
    "title": "Wind-driven",
    "content": " ",
    "url": "http://localhost:4000/des/lateral#wind-driven",
    "relUrl": "/des/lateral#wind-driven"
  },"30": {
    "doc": "Lateral snow redistribution",
    "title": "Gravitation-driven",
    "content": "under construction . ",
    "url": "http://localhost:4000/des/lateral#gravitation-driven",
    "relUrl": "/des/lateral#gravitation-driven"
  },"31": {
    "doc": "Lateral snow redistribution",
    "title": "Lateral snow redistribution",
    "content": " ",
    "url": "http://localhost:4000/des/lateral",
    "relUrl": "/des/lateral"
  },"32": {
    "doc": "Processing meteo data",
    "title": "Processing and regionalisation of meteorological input data",
    "content": "under construction . openAMUNDSEN simulates the processes for each model grid cell individually and is developed to use meteorological forcing from different sources. The standard application is to provide meteorological station data (point measurements). openAMUNDSEN provides a set of procedures suited specifically for topographically complex terrain to regionalise the point data to the model grid. ",
    "url": "http://localhost:4000/des/meteo#processing-and-regionalisation-of-meteorological-input-data",
    "relUrl": "/des/meteo#processing-and-regionalisation-of-meteorological-input-data"
  },"33": {
    "doc": "Processing meteo data",
    "title": "Required meteorological input data",
    "content": ". | air temperature | precipitation | global radiation | wind speed | relative humidity | . ",
    "url": "http://localhost:4000/des/meteo#required-meteorological-input-data",
    "relUrl": "/des/meteo#required-meteorological-input-data"
  },"34": {
    "doc": "Processing meteo data",
    "title": "optional input data",
    "content": ". | incoming longwave radiation | . ",
    "url": "http://localhost:4000/des/meteo#optional-input-data",
    "relUrl": "/des/meteo#optional-input-data"
  },"35": {
    "doc": "Processing meteo data",
    "title": "Regionalisation of station data",
    "content": "Regression-based approach including interpolation of the residuals . For each model time step, . | a regression analysis between observations and the associated station elevation is performed to derive an elevation-dependent trend function. | the derived function is applied upon a digital elevation model to create a trend field for a given meteorological variable (e.g., temperature as a function of elevation). | the residuals for all station locations are calculated by subtracting the calculated regression value for the station elevation from the actual measurement for the current time step. | the residuals from the station locations (raster cells) are then interpolated to the grid using Inverse Distance Weighting (IDW) method. | the interpolated residual field is finally added to the trend field, which results in elevation- and distance-dependent interpolated field ensuring a reproduction of the measured values at the station locations. | . Monthly altitudinal gradients . ",
    "url": "http://localhost:4000/des/meteo#regionalisation-of-station-data",
    "relUrl": "/des/meteo#regionalisation-of-station-data"
  },"36": {
    "doc": "Processing meteo data",
    "title": "Directly use gridded input",
    "content": "An option to directly read and use gridded meteorological data is currently in development. ",
    "url": "http://localhost:4000/des/meteo#directly-use-gridded-input",
    "relUrl": "/des/meteo#directly-use-gridded-input"
  },"37": {
    "doc": "Processing meteo data",
    "title": "Choose and configure method in openAMUNDSEN",
    "content": " ",
    "url": "http://localhost:4000/des/meteo#choose-and-configure-method-in-openamundsen",
    "relUrl": "/des/meteo#choose-and-configure-method-in-openamundsen"
  },"38": {
    "doc": "Processing meteo data",
    "title": "Processing meteo data",
    "content": " ",
    "url": "http://localhost:4000/des/meteo",
    "relUrl": "/des/meteo"
  },"39": {
    "doc": "News",
    "title": "News",
    "content": "under construction . ",
    "url": "http://localhost:4000/news/",
    "relUrl": "/news/"
  },"40": {
    "doc": "Output data",
    "title": "Output data",
    "content": " ",
    "url": "http://localhost:4000/doc/output",
    "relUrl": "/doc/output"
  },"41": {
    "doc": "Precipitation correction",
    "title": "Correction of precipitation undercatch",
    "content": "Precipitation measurements are vital input for every hydrological model. Particularly measuring solid precipitation in complex alpine terrain is prone to large errors which typically results in an undercatch of precipitation. High wind speeds can cause an undercatch of snowfall up to 50 % (Kochendorfer et al. 2017) when using typical precipitation gauges / pluviometers. ",
    "url": "http://localhost:4000/des/precipitation#correction-of-precipitation-undercatch",
    "relUrl": "/des/precipitation#correction-of-precipitation-undercatch"
  },"42": {
    "doc": "Precipitation correction",
    "title": "Approaches implemented in the model",
    "content": "Three different approaches are implemented in openAMUNDSEN to correct for the undercatch of solid precipitation: . | Constant snow correction factor | WMO approach (Goodison et al. 1998) | Method proposed by Kochendorfer et al. 2017 | . Constant correction factor for snowfall . A basic method to correct for undercatch is a simple, linear scaling of precipitation. The fracture of snowfall (i.e. solid precipitation) is multiplied by a defined, constant factor (e.g. 1.25 for 25% of added solid precipitation). WMO approach (Goodison et al. 1998) . The WMO approach uses different transfer functions for different type of gauges to scale solid precipitation using measured meteorological conditions (i.e. temperature and/or wind speed). This approach provides functions for following gauge types/setups: . | nipher | tretyakov | us_shielded | us_unshielded | hellmann | . Method proposed by Kochendorfer et al. 2017 . The method introduced by Kochendorfer et al. estimates undercatch regardless of precipitation phase. This method also uses transfer functions for different measuring setups and takes wind speed and temperature into account. In contrast to the ‘WMO’method, the transfer functions were derived from different windshields used for the same gauge (3-wire T200B, Geonor Inc., Oslo, Norway), as well as from a unshielded gauge. Supported measuring setups are: . | unshielded | single alter | double alter | small DFIR | Belfort double-Alter | . ",
    "url": "http://localhost:4000/des/precipitation#approaches-implemented-in-the-model",
    "relUrl": "/des/precipitation#approaches-implemented-in-the-model"
  },"43": {
    "doc": "Precipitation correction",
    "title": "Choose and configure method in openAMUNDSEN",
    "content": ". | Constant correction factor for snowfall | . # Parameters for adjusting precipitation for wind-induced undercatch and snow redistribution precipitation_correction: - method: constant_scf scf: 1.25 . | Method proposed by Kochendorfer et al. 2017 | . # Parameters for adjusting precipitation for wind-induced undercatch and snow redistribution precipitation_correction: - method: kochendorfer # use the Kochendorfer et al. (2017) transfer functions gauge: us_un # gauge-specific transfer function to use according to Kochendorfer et al. (2017, Table 3) . | WMO approach (Goodison et al. 1998) | . # Parameters for adjusting precipitation for wind-induced undercatch and snow redistribution precipitation_correction: - method: wmo gauge: hellmann . ",
    "url": "http://localhost:4000/des/precipitation#choose-and-configure-method-in-openamundsen",
    "relUrl": "/des/precipitation#choose-and-configure-method-in-openamundsen"
  },"44": {
    "doc": "Precipitation correction",
    "title": "References",
    "content": ". | Goodison, B. E., Louie, P., &amp; Yang, D. (1998). WMO solid precipitation measurement intercomparison (World Meteorological Organization, p. 212). World Meteorological Organization. https://library.wmo.int/doc_num.php?explnum_id=9694 . | Kochendorfer, J., Rasmussen, R., Wolff, M., Baker, B., Hall, M. E., Meyers, T., Landolt, S., Jachcik, A., Isaksen, K., Brækkan, R., &amp; Leeper, R. (2017). The quantification and correction of wind-induced precipitation measurement errors. Hydrology and Earth System Sciences, 21(4), 1973–1989. https://doi.org/10.5194/hess-21-1973-2017 . | . ",
    "url": "http://localhost:4000/des/precipitation#references",
    "relUrl": "/des/precipitation#references"
  },"45": {
    "doc": "Precipitation correction",
    "title": "Precipitation correction",
    "content": " ",
    "url": "http://localhost:4000/des/precipitation",
    "relUrl": "/des/precipitation"
  },"46": {
    "doc": "Publications",
    "title": "Publications",
    "content": "under construction . ",
    "url": "http://localhost:4000/publications/",
    "relUrl": "/publications/"
  },"47": {
    "doc": "Radiation modeling",
    "title": "Short- and long-wave radiative flux modeling",
    "content": "under construction . Short- and long-wave radiative fluxes are a key component of the energy balance of the snow cover. Specifically . ",
    "url": "http://localhost:4000/des/radiation#short--and-long-wave-radiative-flux-modeling",
    "relUrl": "/des/radiation#short--and-long-wave-radiative-flux-modeling"
  },"48": {
    "doc": "Radiation modeling",
    "title": "Incoming short-wave radiation",
    "content": "Incoming short-wave radiation strongly varies in time and space depending on terrain position and atmospheric state. To regionalise point measurements, openAMUNDSEN calculates potential global radiation for each grid cell based on position of the sun, orographic shadows, local aspect and slope, atmospheric composition (aerosols, water vapour content), multiple reflections between snow and clouds as well as from snow covered neighbouring slopes. Calculated potential global radiation is then compared to observed global radiation to determine cloud coverage. In the final step, cloud coverage is regionalised using the methods described in Processing meteo data, and actual incoming short-wave radiation is calculated from potential global radiation and cloud coverage for each model grid cell. ",
    "url": "http://localhost:4000/des/radiation#incoming-short-wave-radiation",
    "relUrl": "/des/radiation#incoming-short-wave-radiation"
  },"49": {
    "doc": "Radiation modeling",
    "title": "Outgoing / reflected short-wave radiation",
    "content": "Reflected short wave radiation depends on surface albedo, i.e. the ability to reflect incoming short-wave radiation. For snow, albedo varies with snow characteristics like grain size, density and snow impurity. In openAMUNDSEN, snow albedo is modelled using an ageing-curve approach (Citation xxx). ",
    "url": "http://localhost:4000/des/radiation#outgoing--reflected-short-wave-radiation",
    "relUrl": "/des/radiation#outgoing--reflected-short-wave-radiation"
  },"50": {
    "doc": "Radiation modeling",
    "title": "Incoming long-wave radiation",
    "content": "Incoming long-wave radiation from the sky is a function of atmospheric composition and temperature and is determined using the the Stefan-Boltzmann law. Atmospheric emissivity thereby depends on water vapour content in clear sky conditions and cloud cover in overcast situations. Additionally, openAMUNDSEN accounts for long-wave radiation from the neighbouring slopes. ",
    "url": "http://localhost:4000/des/radiation#incoming-long-wave-radiation",
    "relUrl": "/des/radiation#incoming-long-wave-radiation"
  },"51": {
    "doc": "Radiation modeling",
    "title": "Outgoing / emitted long-wave radiation",
    "content": "Outgoing long-wave radiation is calculated following the Stephan-Boltzmann law with the emissivity of snow and modelled snow surface temperature. ",
    "url": "http://localhost:4000/des/radiation#outgoing--emitted-long-wave-radiation",
    "relUrl": "/des/radiation#outgoing--emitted-long-wave-radiation"
  },"52": {
    "doc": "Radiation modeling",
    "title": "References",
    "content": ". | Bernard Bourges. Improvement in solar declination computation. Solar Energy, 1985, 35(4), pp.367-369. | Corripio, J. G. (2002). Modelling the energy balance of high altitude glacierised basins in the Central Andes. PhD thesis, University of Edinburgh. | Corripio, J. G. (2003). Vectorial algebra algorithms for calculating terrain parameters from DEMs and solar radiation modelling in mountainous terrain. International Journal of Geographical Information Science, 17(1), 1–23. https://doi.org/10.1080/13658810210157796 . | J. W. Spencer, “Fourier series representation of the position of the sun” in Search 2 (5), p. 172 (1971) . | Snow Hydrology: Summary Report of the Snow Investigations. Published by the North Pacific Division, Corps of Engineers, U.S. Army, Portland, Oregon, 1956. 437 pages, 70 pages of plates, maps and figs., 27 cm. https://doi.org/10.3189/S0022143000024503 . | Hanzer, F., Helfricht, K., Marke, T., &amp; Strasser, U. (2016). Multilevel spatiotemporal validation of snow/ice mass balance and runoff modeling in glacierized catchments. The Cryosphere, 10(4), 1859–1881. https://doi.org/10.5194/tc-10-1859-2016 . | Essery, R., Morin, S., Lejeune, Y., &amp; B Ménard, C. (2013). A comparison of 1701 snow models using observations from an alpine site. Advances in Water Resources, 55, 131–148. https://doi.org/10.1016/j.advwatres.2012.07.013 . | Dutra, E., Balsamo, G., Viterbo, P., Miranda, P., Beljaars, A., Schär, C., &amp; Elder, K. (2009). New snow scheme in HTESSEL: description and offline validation. ECMWF. https://doi.org/10.21957/98x9mrv1y . | Prata, A. J. (1996). A new long-wave formula for estimating downward clear-sky radiation at the surface. Quarterly Journal of the Royal Meteorological Society, 122(533), 1127–1151. doi:10.1002/qj.49712253306 . | Liston, G. E., &amp; Elder, K. (2006). A Meteorological Distribution System for High-Resolution Terrestrial Modeling (MicroMet). Journal of Hydrometeorology, 7(2), 217–234. https://doi.org/10.1175/JHM486.1 . | Greuell, W., Knap, W. H., &amp; Smeets, P. C. (1997). Elevational changes in meteorological variables along a midlatitude glacier during summer. Journal of Geophysical Research, 102(D22), 25941–25954. https://doi.org/10.1029/97JD02083 . | . ",
    "url": "http://localhost:4000/des/radiation#references",
    "relUrl": "/des/radiation#references"
  },"53": {
    "doc": "Radiation modeling",
    "title": "Radiation modeling",
    "content": " ",
    "url": "http://localhost:4000/des/radiation",
    "relUrl": "/des/radiation"
  },"54": {
    "doc": "Running the model",
    "title": "Running the model",
    "content": "When the input data and the model configuration have been prepared, a model run can be started either using the openamundsen command line utility (openamundsen config_file.yml), or from within Python using the following syntax: . import openamundsen as oa config = oa.read_config('config_file.yml') # read in configuration file model = oa.OpenAmundsen(config) # create OpenAmundsen object and populate unspecified parameters with default values model.initialize() # read in input data files, initialize state variables etc. model.run() # run the model . ",
    "url": "http://localhost:4000/doc/runningthemodel",
    "relUrl": "/doc/runningthemodel"
  },"55": {
    "doc": "Runoff",
    "title": "Simulating catchment runoff and streamflow",
    "content": "under construction . ",
    "url": "http://localhost:4000/des/runoff#simulating-catchment-runoff-and-streamflow",
    "relUrl": "/des/runoff#simulating-catchment-runoff-and-streamflow"
  },"56": {
    "doc": "Runoff",
    "title": "Runoff",
    "content": " ",
    "url": "http://localhost:4000/des/runoff",
    "relUrl": "/des/runoff"
  },"57": {
    "doc": "Model structure",
    "title": "General model structure",
    "content": "under construction . ",
    "url": "http://localhost:4000/des/structure#general-model-structure",
    "relUrl": "/des/structure#general-model-structure"
  },"58": {
    "doc": "Model structure",
    "title": "Model structure",
    "content": " ",
    "url": "http://localhost:4000/des/structure",
    "relUrl": "/des/structure"
  }
}
